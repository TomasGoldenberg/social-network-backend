32
Anatomía de un JWT

JWT es un estándar de la industria que nos permite manejar demandas de información entre dos clientes.
.
Un JSON Web Token es un estandar que nos permite generar demandas entre 2 clientes de manera segura.
Un JWT está encriptado, pero tiene 3 partes principales divididas por “.” (punto)

    Header: Contiene los archivos de configuración (el tipo y el algoritmo de encriptación)
    Payload: Guarda la información de nuestros usuarios
    Signature: es la firma que contiene el header códificado más el payload códificado, para poder dar acceso a un contenido, éste deberá de ser firmado con un secret, que es la clave secreta con la que se firman los tokens, misma que sólo la deberá de conocer el backend.

Dentro del payload tenemos información que puede ser relevante para la autorización tal como:

    La expiración
    Id’s
    Nombres
    etc
    .
    Es importante saber que los JWT acabarán firmando mucha parte de la comunicación, por lo que no es recomendable que mucha información viaje, ésto puede acabar alentando tu aplicación.

33 el secret no debe ir en el codigo 
ira en un archivo.env que se incluira en el gitignore

34 crearemos la entidad auth para que valla separada de la entidad user
de este modo la informacion sensible estara inaccesible publicamente

35-EN API CREAMOS LA CARPETA AUTH
36 EN AUTH CREAMO INDEX.JS
const store = require("../../../store/dummy");
const controller = require("./controller");

module.exports = controller(store)

37 en AUTH creamos CONTROLLER.JS
const TABLA = "auth";

module.exports= function(injectedStore){
    const store = injectedStore;
    if(!store){
        store = require("../../../store/dummy");
    }

    function upsert(data){
        const authData={
            id: data.id
        }

        if(data.username){
            authData.username= data.username
        }

        if(data.password){
            authData.password= data.password
        }

        return store.upsert(TABLA, authData)
    }

    return{
        upsert,
    }
}
38-ya tenemos la autenticacion creada pero ahora tenemos que hacer que cada vez que se crea o se actualize un user pase por la auth
USER/CONTROLLER
const auth =require("../auth")
async function upsert(data) {
        const user = {
            name: data.name,
            username: data.username
        }

        if (data.id) {
            user.id = data.id;
        } else {
            user.id = nanoid()
        }

        if(data.password ||data.username){
            await auth.upsert({
                id:user.id,
                username:user.username,
                password:data.password
            })
        }

        return store.upsert(TABLA, user);
    }

39- EN DUMMY LA DB ESTA VACIA PERO LA INICIALIZAMOS COMO UN ARRAY VACIO
function upsert(table,data){   //upsert = update + insert
if(!db[table]){
    db[table] =[ ]
}
    db[table].push(data)

    console.log(db)
}
 
40 inicializamos el server EN INSOMNIA HACEMOS UN POST JSON A API/USER
{
	"name":"Paco",
	"username":"Paquito",
	"password": "1234"
	
}

salio todo ok 
{
  "error": false,
  "status": 201
}

41 en consola nos viene la tabla user y la tabla auth y el id del user creado es igual en auth que en user 
YA TENEMOS EL REGITRO CREADO

{
  user: [
    { id: '1', name: 'tomas', email: 'tomasgoldenberg@hotmail.com' },
    { id: '2', name: 'melina', email: 'melxviera@hotmail.com' },
    { name: 'Paco', username: 'Paquito', id: 'XTCogTB9ulJBj_futkVf3' }
  ],
  auth: [
    {
      id: 'XTCogTB9ulJBj_futkVf3',
      username: 'Paquito',
      password: '1234'
    }
  ]
}


