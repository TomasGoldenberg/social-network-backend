133- COnectando con nuestro microservicio de base de datos hacia nuestra api

vamos a implementar un patron para poder acceder a cualquier base de datos que queramos , en lugar de crear un archivo para cada base de datos vamos a crear un constructor de bases de datos remotas 
y un archivo que genere la base de datos remota

EJ COMo hicimos con el controller y el index.js con injectedStore

134- TERMINAL NPM I REQUEST //ayuda a simplificar peticiones http

135 en la raiz del proyecto en la carpeta STORE creamos el archivo
remote.js
const request = require('request');

let urlRemote;

function req(method, table, data = null) {
    let url = `${urlRemote}/${table}`;
    let body = '';

    if(data && method === 'GET') {
        url += `/${id}`;
    } else if(data) {
        body = JSON.stringify(data);
    }
    
    return new Promise((resolve, reject) => {
        request({
            url,
            method,
            body,
            headers: {
                'content-type': 'application/json'
            }
        },(error, req, result) => {
            if(error) {
                console.error('Error en la base de datos', error);
                return reject(error.message);
            }

            const res = JSON.parse(result);
            return resolve(res.body);
        });
    });
}




function insert(table, data) {
    return req('POST', table, data);
}

function update(table, data) {
    return req('PUT', table, data);
}

module.exports = class RemoteStore {

    constructor(host, port) {
        urlRemote = `http://${host}:${port}`
    }

    list(table) {
        return req('GET', table);
    }

    get(table, id) {
        return req('GET', table, id);
    }

    upsert(table, data) {
        if(data.id) {
            return update(table, data);
        }
        return insert(table, data);
    }
}

136 en STORE creamos el archivo REMOTE-MYSQL.JS
const remote = require("./remote");
const config = require("../config");

module.exports = new remote(config.mysqlService.host, config.mysqlService.port)

137 en config.js
mysqlService:{
        port: process.env.MYSQL_SRV_PORT || 3001
	host: process.env.MYSQL_SRV_HOST ||"localhost"
    }


138 de momento ya esta lista asi que la usaremos en el componente de usuarios
en COMPONENTS/USER/INDEX.JS
cambiamos la linea const store = require("../../../store/mysql") POR
const store = require("../../../store/remote-mysql")


139 inicializamos dos servers  nodemon mysql/index.js
en otra pesta√±a de la terminal nodemon api/index.js

140 en insomnia hacemos la peticion leer users y FUNCIONA!

no agarramos los datos atacando contra el servicio de mysql
no
estamos en neustro servicio de api haciendo una peticion al microservicio de mysql que esta resolviendo los datos y devolviendo el resultado a nuestra api

NUESTRA API NO SABE NADA NI CUAL ES LA DB QUE HAY POR DETRAS
NO SABE CUALES SON LAS QUERYS, TODO ESO NO ES PROBLEMA DE API SINO DE EL SERVICIO DE MYSQL

DE ESTA FORMA PODEMOS ACCEDER A NUESTROS DATOS A TRAVES DE UN MICROSERVICIO ,CREANDO LAS FUNCIONES NECESARIAS DENTRO DE NUESTRO ARCHIVO REMOTE.JS


