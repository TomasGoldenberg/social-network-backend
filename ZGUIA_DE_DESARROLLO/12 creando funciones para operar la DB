GLOSARIO----------------------------------------
EN SQL LA SENTENCIA POR EJ`INSERT INTO ${table} SET ? ON DUPLICATE KEY UPDATE ?`, [data, data],
los datos del array llenaran los ?44

-------------------------------------------------

96 ya creamos la base de datos y la funcion list
ahora vamos a crear el resto de funciones que teniamos en dummy
get, upsert ,remove, y query!

mysql.js

function get(table, id){
  return new Promise( (resolve,reject)=>{
	connection.query(`SELECT * FROM ${table} WHERE id = ${id}`, 			(err,result)=>{
		if(err) return reject(err);

		resolve(result)
			});	
	} );
}

module.exports = {
list,
get
}

97- vamos a insomnia 
	y con un get a api/user/123
		y nos devuelve el user de id 123

98- vamos a nuestra base de datos a crear la tabla de auth
id varchar 32 pk
username varchar 32
password varchar 64


99 ahora vamos a crear la funcion upsert para actualizar o insertar usuarios 


const upsert = async (table, data) => 
	new Promise((resolve, reject) => {
    connection.query(`INSERT INTO ${table} SET ? ON DUPLICATE KEY UPDATE ?`, [data, data], (error, result) => {
      console.log('UPDATE DATA: ', result)
      if (error) {
        return reject(error)
      }
      resolve(result)
    })
  })

//on duplicate key es que si hacemos un cambio sobre el mismo id lo entiende y cambia el valor que cambiaste en la columna que tenga el mismo id 

100 ahora crearemos la funcion query

function query(table ,query){
  return new Promise( (resolve, reject)=>{
	connection.query(`SELECT * FROM ${table} WHERE ?`, query,(err,result)=>{
	if(err) return reject(err);
	
	resolve(result[0] || null); 
	})
				} )
}

module.exports = {
list,
get,
upsert,
query
}


101 en auth controller.js en la funcion login cambiamos una linea para que venga el token en el formato correcto

    async function login (username, password){
        const data = await store.query(TABLA,{ username: username})
        return bcrypt.compare(password, data.password)
          .then(sonIguales =>{
            if(sonIguales === true){
//dejamos esta return auth.sign(JSON.parse(JSON.stringify(data)))
            }else{
                throw new Error("Usuario o contrase√±a no valida")
            }
          });
        
    }
102 en insomnia hacemos un post para crear un user
nos devuelve las cosas que sucedieron 
y si nos fijamos en nuestra database 
este nuevo usuario debe estar en la tabla auth y en la tabla user

103 ahora vamos a insomnia  a editar la info de algun user 

 hacemos el login de alguno , agarramos su token
 vamos al PUT , en auth bearer le ponemos el token
 le cambiamos el nombre del user a yamimotonokamina
  vamos a los users y vemos que ya cambio su nombre


104 listo ya podemos obtener usuarios con get
    crear usuarios o modificarlos con upsert 
    post para crear put para modificar 
	
